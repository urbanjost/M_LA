elementcopy (3m_la)  - [M_LA] copy elements from IN to OUT regardless of rank until hit end of one of them
linspace (3m_la)     - [M_LA] return a vector of linearly spaced values
mat_magic (3m_la)    - [M_LA] create an N x N magic square array, N>2
linspace(3m_la) 					       linspace(3m_la)

NAME
  linspace(3f) - [M_LA] return a vector of linearly spaced values

SYNOPSIS
  function linspace(x1,x2,n)

      integer,intent(in)	       :: n
      ${TYPE}(kind=${KIND}),intent(in) :: x1,x2
      ${TYPE}(kind=${KIND})	       :: linspace

  Where ${TYPE} may be real or integer and ${KIND} may be any supported kind
  for the corresponding type.

USAGE
  Common usage:

      y = linspace(x1,x2)
      y = linspace(x1,x2,n)

DESCRIPTION
  linspace returns a vector of linearly spaced values from x1 to x2 inclusive.
  It gives direct control over the number of points and always includes the
  endpoints, the results being the same as [(x1+i*(x2-x1)/(n-1),i=0,n-1)] if
  n>1 and [x1,x2] if n<=1.

OPTIONS
  X1,X2
    X1 and X2 are the upper and lower bound of the values returned. The
    options can be of type REAL or INTEGER, but must be of the same type.

  N number of values to return

RETURNS
  LINSPACE
    The returned row vector starts with X1 and ends with X2, returning N
    evenly spaced values.

EXAMPLES
  Sample program:

     program demo_linspace
     use M_LA,	only : linspace
     implicit none
     character(len=*), parameter :: gen='(*(g0, 1x))'
	write( *, gen ) linspace(  0,	   9,	 10 )
	write( *, gen ) linspace( 10.0,   20.0,  11 )
	write( *, gen ) linspace( 11.1d0, 12.1d0, 5 )
	write( *, gen ) linspace( 11.1,   12.1,   5 )
     end program demo_linspace
  Results: 0 1 2 3 4 5 6 7 8 9 10.00 11.00 12.00 13.00 14.00 15.00 16.00 17.00
  18.00 19.00 20.00 11.1000000000 11.3500000000 11.6000000000 11.8500000000
  12.100000000 11.1000004 11.3500004 11.6000004 11.8500004 12.1000004

  Results:

				March 24, 2025		       linspace(3m_la)
wgedi(3m_la)							  wgedi(3m_la)

	      name wgedi(3f) - [m_la] computes the determinant and inverse of
	      a matrix using the factors computed by wgeco(3f) or wgefa(3f).
	      synopsis subroutine
	      ml_wgedi(ar,ai,lda,n,ipvt,detr,deti,workr,worki,job)

		   integer(kind=4) :: lda
		   real(kind=8) :: ar(lda,*)
		   real(kind=8) :: ai(lda,*)
		   integer(kind=4) :: n
		   integer(kind=4) :: ipvt(*)
		   real(kind=8) :: detr(2)
		   real(kind=8) :: deti(2)
		   real(kind=8) :: workr(*)
		   real(kind=8) :: worki(*)
		   integer(kind=4) :: job

	      description wgedi(3f) computes the determinant and inverse of a
	      matrix using the factors computed by wgeco(3f) or wgefa(3f).

	      on entry

		  a	  double-complex(lda, n)
			  the output from wgeco or wgefa.

		  lda	  integer
			  the leading dimension of the array a.

		  n	  integer
			  the order of the matrix a.

		  ipvt	  integer(n)
			  the pivot vector from wgeco(3f) or wgefa(3f).

		  work	  double-complex(n)
			  work vector. contents destroyed.

		  job	  integer

			   = 11   both determinant and inverse.
			   = 01   inverse only.
			   = 10   determinant only.

	      on return

		  a	  inverse of original matrix if requested.
			  otherwise unchanged.

		  det	  double-complex(2)
			  determinant of original matrix if requested.
			  otherwise not referenced.

			   determinant = det(1) * 10.0**det(2)
			   with 1.0 .le. cabs1(det(1) .lt. 10.0
			   or det(1) .eq. 0.0 .

	      error condition

		 a division by zero will occur if the input factor contains a zero
		 on the diagonal and the inverse is requested. it will not occur if
		 the subroutines are called correctly and if wgeco(3f) has set rcond
		 .gt. 0.0 or wgefa(3f) has set info .eq. 0 .

		   linpack. this version dated 07/01/79 .
		   cleve moler, university of new mexico, argonne national lab.

	      subroutines and functions

		   blas waxpy,mat_wscal,mat_wswap
		   fortran dabs,mod

				March 24, 2025			  wgedi(3m_la)
mat_magic(3m_la)					      mat_magic(3m_la)

NAME
  mat_magic(3f) - [M_LA] create an N x N magic square array, N>2

SYNOPSIS
  subroutine mat_magic(a,rows,n)

	integer 	:: rows
	integer 	:: n
	doubleprecision :: a(rows,n)

DESCRIPTION
  This procedure returns the values to create a magic squares array, an n by n
  matrix in which each integer 1, 2, ..., n*n appears exactly once; and all
  columns, rows, and diagonals sum to the same number.

OPTIONS
  A An array to fill with the magic square values. The smallest dimension
    should be >= 3. Since a square is required only the first N will be
    filled, where n=min(rows,columns).

  ROWS
    size of a row of A; must be >= N

  N size of an edge of the magic square. A() must have at least this many
    columns.

PEDIGREE
  Based on an algorithm for magic squares from

      Mathematical Recreations and Essays, 12th ed.,
      by W. W. Rouse Ball and H. S. M. Coxeter

EXAMPLES
  Sample program

     program demo_mat_magic
     use M_LA, only : mat_magic
     implicit none
     integer,parameter :: isize=10
     doubleprecision   :: arr(isize,isize)
     integer	       :: i, j, k
	do k=1,isize
	   write(*,'(*(g0,1x))')'K=',k
	   call mat_magic(arr,size(arr,dim=1),k)
	   do i=1,k
	      write(*,'(i2,":",*(i5):)')i,&
	       (nint(arr(i,j)),j=1,k),&
	       nint(sum(arr(k,:k)))
	   enddo
	enddo
     end program demo_mat_magic

  Results:

      K= 1
      1:    1	 1
      K= 2
      1:    1	 3    6
      2:    4	 2    6
      K= 3
      1:    8	 1    6   15
      2:    3	 5    7   15
      3:    4	 9    2   15
      K= 4
      1:   16	 2    3   13   34
      2:    5	11   10    8   34
      3:    9	 7    6   12   34
      4:    4	14   15    1   34
      K= 5
      1:   17	24    1    8   15   65
      2:   23	 5    7   14   16   65
      3:    4	 6   13   20   22   65
      4:   10	12   19   21	3   65
      5:   11	18   25    2	9   65
      K= 6
      1:   35	 1    6   26   19   24	111
      2:    3	32    7   21   23   25	111
      3:   31	 9    2   22   27   20	111
      4:    8	28   33   17   10   15	111
      5:   30	 5   34   12   14   16	111
      6:    4	36   29   13   18   11	111
      K= 7
      1:   30	39   48    1   10   19	 28  175
      2:   38	47    7    9   18   27	 29  175
      3:   46	 6    8   17   26   35	 37  175
      4:    5	14   16   25   34   36	 45  175
      5:   13	15   24   33   42   44	  4  175
      6:   21	23   32   41   43    3	 12  175
      7:   22	31   40   49	2   11	 20  175
      K= 8
      1:   64	 2    3   61   60    6	  7   57  260
      2:    9	55   54   12   13   51	 50   16  260
      3:   17	47   46   20   21   43	 42   24  260
      4:   40	26   27   37   36   30	 31   33  260
      5:   32	34   35   29   28   38	 39   25  260
      6:   41	23   22   44   45   19	 18   48  260
      7:   49	15   14   52   53   11	 10   56  260
      8:    8	58   59    5	4   62	 63    1  260
      K= 9
      1:   47	58   69   80	1   12	 23   34   45  369
      2:   57	68   79    9   11   22	 33   44   46  369
      3:   67	78    8   10   21   32	 43   54   56  369
      4:   77	 7   18   20   31   42	 53   55   66  369
      5:    6	17   19   30   41   52	 63   65   76  369
      6:   16	27   29   40   51   62	 64   75    5  369
      7:   26	28   39   50   61   72	 74    4   15  369
      8:   36	38   49   60   71   73	  3   14   25  369
      9:   37	48   59   70   81    2	 13   24   35  369
      K= 10
      1:   92	99    1    8   15   67	 74   51   58	40  505
      2:   98	80    7   14   16   73	 55   57   64	41  505
      3:    4	81   88   20   22   54	 56   63   70	47  505
      4:   85	87   19   21	3   60	 62   69   71	28  505
      5:   86	93   25    2	9   61	 68   75   52	34  505
      6:   17	24   76   83   90   42	 49   26   33	65  505
      7:   23	 5   82   89   91   48	 30   32   39	66  505
      8:   79	 6   13   95   97   29	 31   38   45	72  505
      9:   10	12   94   96   78   35	 37   44   46	53  505

    10:
      11   18  100   77   84   36   43	 50   27   59  505

				March 24, 2025		      mat_magic(3m_la)
elementcopy(3m_la)					    elementcopy(3m_la)

NAME
  elementcopy(3f) - [M_LA] copy elements from IN to OUT regardless of rank
  until hit end of one of them

SYNOPSIS
  Subroutine elementcopy (IN, OUT)

       ${TYPE} (kind=${KIND}), Intent (In) :: IN(..)
       ${TYPE} (kind=${KIND})		   :: OUT(..)

  Where ${TYPE}(kind=${KIND}) may be

    •  Real(kind=real32)

    •  Real(kind=real64)

    •  Real(kind=real128)

    •  Integer(kind=int8)

    •  Integer(kind=int16)

    •  Integer(kind=int32)

    •  Integer(kind=int64)

DESCRIPTION
  Copy the elements from scalar or array IN to array or scalar OUT until
  either the end of IN or OUT is reached, regardless of rank of the arguments.

OPTIONS
  IN
    input array or scalar

  OUT
    output array or scalar

EXAMPLES
  Sample program:

     program demo_elementcopy
     use m_la, only : elementcopy
     implicit none
     character(len=*),parameter :: g='(*(g0:,","))'
     real :: b, b1(3), b2(2,3), b3(2,2,2)
     real :: c8(8), c6(6), c3(3), c
     integer :: ib, ib1(3), ib2(2,3), ib3(2,2,2)
     integer :: ic8(8), ic6(6), ic3(3), ic
	! default real
	call elementcopy(100.0,b)
	write(*,g)'b',b
	call elementcopy([1.0,2.0,3.0],b1)
	write(*,g)'b1',b1
	call elementcopy(reshape([1.0,2.0,3.0,4.0,5.0,6.0],[2,3]),b2)
	write(*,g)'b2',b2
	call elementcopy(reshape([1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0],[2,2,2]),b3)
	write(*,g)'b3',b3
	call elementcopy(b3,c8) ! pack
	write(*,g)'c8',c8
	call elementcopy(b3*10,c3) ! smaller
	write(*,g)'c3',c3
	call elementcopy(pack(b3*111.0,.true.),b) ! to scalar
	write(*,g)'b',b
	c6=-999.0
	call elementcopy(b1*10,c6) ! bigger
	write(*,g)'c6',c6
	call elementcopy(b3(2:,2,2),c) !  to scalar from vector
	write(*,g)'c',c
	call elementcopy(b3(2,1,1),c) !  to scalar from element
	write(*,g)'c',c
	call elementcopy(b3,c) !  to scalar
	write(*,g)'c',c
	! default integer
	call elementcopy(100,ib)
	write(*,g)'ib',ib
	call elementcopy([1,2,3],ib1)
	write(*,g)'ib1',ib1
	call elementcopy(reshape([1,2,3,4,5,6],[2,3]),ib2)
	write(*,g)'ib2',ib2
	call elementcopy(reshape([1,2,3,4,5,6,7,8],[2,2,2]),ib3)
	write(*,g)'ib3',ib3
	call elementcopy(ib3,ic8) ! pack
	write(*,g)'ic8',ic8
	call elementcopy(ib3*10,ic3) ! smaller
	write(*,g)'ic3',ic3
	call elementcopy(pack(ib3*111,.true.),ib) ! to scalar
	write(*,g)'ib',ib
	ic6=-999
	call elementcopy(ib1*10,ic6) ! bigger
	write(*,g)'ic6',ic6
	call elementcopy(ib3(2:,2,2),ic) !  to scalar from vector
	write(*,g)'ic',ic
	call elementcopy(ib3(2,1,1),ic) !  to scalar from element
	write(*,g)'ic',ic
	call elementcopy(ib3,ic) !  to scalar
	write(*,g)'ic',ic
	!
	tesseract: block
	integer :: box(2,3,4,5)
	integer :: i
	   call elementcopy([(i,i=1,size(box))],box)
	   write(*,g)'box',box
	endblock tesseract
     end program demo_elementcopy

  Results:

     b,100.0000
     b1,1.00000,2.00000,3.00000
     b2,1.00000,2.00000,3.00000,4.00000,5.00000,6.00000
     b3,1.00000,2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000
     c8,1.00000,2.00000,3.00000,4.00000,5.00000,6.00000,7.00000,8.00000
     c3,10.0000,20.0000,30.0000
     b,111.0000
     c6,10.00000,20.00000,30.00000,-999.0000,-999.0000,-999.0000
     c,8.000000
     c,2.000000
     c,1.000000
     ib,100
     ib1,1,2,3
     ib2,1,2,3,4,5,6
     ib3,1,2,3,4,5,6,7,8
     ic8,1,2,3,4,5,6,7,8
     ic3,10,20,30
     ib,111
     ic6,10,20,30,-999,-999,-999
     ic,8
     ic,2
     ic,1
     box,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,
     19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
     36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,
     53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,
     70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,
     87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,
     103,104,105,106,107,108,109,110,111,112,113,114,115,116,
     117,118,119,120

AUTHOR
  John S. Urban, 2022.05.07

LICENSE
  CC0-1.0

				March 24, 2025		    elementcopy(3m_la)
